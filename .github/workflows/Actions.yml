# gitAction 이 실행할 workflow 를 정의하는 yml 파일입니다
name: CI/CD Pipeline

# 이벤트 트리거 (main 브렌치에 push 될 경우 본 파일실행)
on:
  push:
    branches:
      - main

# 트리거 이후 자동실행될 작업목록 (jobs)

# 1. dockerize-backend : docker 이미지로 빌드후 docker hub에 푸시
# 2. dockerize-frontend : docker 이미지로 빌드후 docker hub에 푸시
# 3. deploy - EC2에서 해당 이미지를 받아와 도커컴포즈로 실행

jobs:
  # build-backend:
  #   name: 스프링 프로젝트 빌드
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 레포지토리 코드가져오기
  #       uses: actions/checkout@v3

  #     - name: JAVA 21 버젼으로 설정하기
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: "21"
  #         distribution: "temurin"

  #     - name: gradlew 파일 실행권한 주기
  #       run: chmod +x ./gradlew

  #     - name: Gradle로 빌드하기
  #       run: ./gradlew build

  # build-frontend:
  #   name: 프론트엔드 프로젝트 빌드
  #   runs-on: ubuntu-latest
  #   env:
  #     CI: false # CI를 false로 설정

  #   steps:
  #     - name: 레포지토리 코드 가져오기
  #       uses: actions/checkout@v3

  #     - name: Node.js 설정
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: "18"

  #     - name: 프론트엔드 의존성 설치
  #       working-directory: ./frontend
  #       run: npm install

  #     - name: 프론트엔드 빌드
  #       working-directory: ./frontend
  #       run: npm run build

  #     - name: 빌드 결과 아티팩트 업로드
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: frontend-build
  #         path: ./frontend/build

  dockerize-backend:
    name: 백엔드 도커 이미지화 이후 Docker hub 에 푸시
    # needs: build # build 작업 후 실행
    runs-on: ubuntu-latest
    steps:
      - name: 레포지토리 코드가져오기
        uses: actions/checkout@v3

      - name: 도커 이미지 빌드하기
        run: docker build -t backend-app:latest .

      - name: Docker Hub 로그인하기
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: 이미지에 태그붙여 Docker Hub에 푸시하기
        run: |
          docker tag backend-app:latest ${{ secrets.DOCKER_USERNAME }}/backend-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/backend-app:latest

  dockerize-frontend:
    name: 프론트엔드 도커 이미지화 및 Docker Hub 푸시
    # needs: build-frontend # 프론트엔드 빌드 후 실행
    runs-on: ubuntu-latest
    steps:
      - name: 레포지토리 코드 가져오기
        uses: actions/checkout@v3

      - name: 현재 폴더경로 조회
        run: ls

      - name: Docker 이미지 빌드하기
        run: docker build -t frontend-app:latest ./frontend

      - name: Docker Hub 로그인하기
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: 이미지에 태그 붙여 Docker Hub에 푸시
        run: |
          docker tag frontend-app:latest ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-app:latest

  deploy:
    name: 배포하자~
    needs:
      - dockerize-frontend
      - dockerize-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # FE 시크릿 파일 생성
      - name: Create .env file for frontend
        run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > frontend/.env

      - name: Check current directory
        run: pwd

      # BE 시크릿 파일 생성
      - name: Create application-private.yml for backend
        run: echo "${{ secrets.APPLICATION_PRIVATE }}" > src/main/resources/application-private.yml

      - name: Check current directory
        run: pwd
        
      # EC2로 .env 파일 복사
      - name: Copy .env file to EC2 (frontend)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./frontend/.env
          target: "/home/ubuntu/a"
          debug: true

      - name: Check current directory
        run: pwd
        
      # EC2로 application-yml 파일 복사
      - name: EC2로 application-private.yml 복사
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./src/main/resources/application-private.yml
          target: "/home/ubuntu/b"
          debug: true

      - name: Check current directory
        run: pwd
        
      # monitoring-config 폴더 복사
      - name: EC2로 monitoring-config 폴더 복사
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./monitoring-config
          target: /home/ubuntu
          debug: true

      - name: EC2로 docker-compose-prod.yml 복사
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: ./docker-compose-prod.yml
          target: "/home/ubuntu"
          debug: true

      - name: EC2에 접속하여 docker-compose down 실행
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu  # docker-compose.yml이 위치한 디렉토리로 이동
            docker compose -f docker-compose-prod.yml down -v  # 기존 컨테이너 중지 및 제거

      - name: EC2에서 사용하지 않는 이미지와 컨테이너 정리
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker system prune

      - name: Docker Hub에 로그인하기
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: EC2에서 최신 이미지 가져오기
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu
            docker compose -f docker-compose-prod.yml pull  # 최신 이미지를 강제로 가져오기

      - name: EC2에서 배포 실행
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu
            docker compose -f docker-compose-prod.yml up -d  # 최신 이미지를 사용하여 컨테이너 실행

  # deploy-frontend:
  #   name: 프론트엔드 배포
  #   needs: dockerize-frontend # 프론트엔드 도커 작업 후 실행
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Docker Hub 로그인
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Docker 이미지 Pull
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           docker pull ${{ secrets.DOCKER_USERNAME }}/my-frontend-app:latest

  #     - name: 기존 컨테이너 중지 및 삭제
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           docker stop my-frontend-app || true
  #           docker rm my-frontend-app || true

  #     - name: 새로운 컨테이너 실행
  #       uses: appleboy/ssh-action@v0.1.5
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ubuntu
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           docker run -d --name my-frontend-app -p 80:80 ${{ secrets.DOCKER_USERNAME }}/my-frontend-app:latest
